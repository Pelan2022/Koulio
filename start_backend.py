#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Startovac√≠ skript pro KOULIO Backend API
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Kontrola verze Pythonu"""
    if sys.version_info < (3, 8):
        print("‚ùå Vy≈æaduje se Python 3.8 nebo novƒõj≈°√≠")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]}")

def install_requirements():
    """Instalace z√°vislost√≠"""
    print("üì¶ Instalace z√°vislost√≠...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        print("‚úÖ Z√°vislosti nainstalov√°ny")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Chyba p≈ôi instalaci z√°vislost√≠: {e}")
        sys.exit(1)

def create_env_file():
    """Vytvo≈ôen√≠ .env souboru pokud neexistuje"""
    env_file = Path(".env")
    if not env_file.exists():
        print("üîß Vytv√°≈ôen√≠ .env souboru...")
        with open(env_file, "w", encoding="utf-8") as f:
            f.write("""# KOULIO Backend API Configuration
FLASK_ENV=development
SECRET_KEY=dev-secret-key-change-in-production
JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
PORT=5000
HOST=0.0.0.0
""")
        print("‚úÖ .env soubor vytvo≈ôen")
    else:
        print("‚úÖ .env soubor ji≈æ existuje")

def check_mcp_connection():
    """Kontrola p≈ôipojen√≠ k MCP serveru"""
    print("üîå Kontrola p≈ôipojen√≠ k MCP serveru...")
    try:
        import mcp_postgres
        # Zkus√≠me jednoduch√Ω dotaz
        db = mcp_postgres
        result = db.execute_query("SELECT 1 as test")
        if result:
            print("‚úÖ MCP PostgreSQL p≈ôipojen√≠ funguje")
        else:
            print("‚ùå MCP PostgreSQL p≈ôipojen√≠ selhalo")
            sys.exit(1)
    except ImportError:
        print("‚ùå MCP PostgreSQL modul nen√≠ nainstalov√°n")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi testov√°n√≠ MCP p≈ôipojen√≠: {e}")
        sys.exit(1)

def start_server():
    """Spu≈°tƒõn√≠ Flask serveru"""
    print("üöÄ Spou≈°tƒõn√≠ KOULIO Backend API...")
    print("üìä Database: PostgreSQL via MCP")
    print("üîê Authentication: JWT tokens")
    print("üîí Password hashing: bcrypt")
    print("üåê CORS enabled for frontend")
    print("üìç URL: http://localhost:5000")
    print("üìñ API Docs: http://localhost:5000/api/health")
    print("\n" + "="*50)
    
    try:
        # Spu≈°tƒõn√≠ Flask aplikace
        os.environ['FLASK_APP'] = 'app.py'
        subprocess.run([sys.executable, "app.py"], check=True)
    except KeyboardInterrupt:
        print("\nüëã Server zastaven u≈æivatelem")
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi spou≈°tƒõn√≠ serveru: {e}")
        sys.exit(1)

def main():
    """Hlavn√≠ funkce"""
    print("üéØ KOULIO Backend API - Startovac√≠ skript")
    print("="*50)
    
    # Kontrola Python verze
    check_python_version()
    
    # Instalace z√°vislost√≠
    install_requirements()
    
    # Vytvo≈ôen√≠ .env souboru
    create_env_file()
    
    # Kontrola MCP p≈ôipojen√≠
    check_mcp_connection()
    
    # Spu≈°tƒõn√≠ serveru
    start_server()

if __name__ == "__main__":
    main()
