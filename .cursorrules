# Full-Stack Web Application - Cursor Rules

## üèóÔ∏è Architektura projektu

### Obecn√Ω p≈ôehled
- **Typ**: Full-stack webov√° aplikace
- **Frontend**: Vanilla HTML/CSS/JS s Tailwind CSS (nebo jin√Ω framework dle pot≈ôeby)
- **Backend**: Node.js/Express API p≈ôipojen√Ω k PostgreSQL
- **Deployment**: Docker + CapRover + Nginx
- **Database**: PostgreSQL s JSONB pro flexibiln√≠ data
- **Source Control**: Git repository pro verzov√°n√≠ k√≥du
- **Deployment**: Git ‚Üí CapRover na hostovan√©m serveru
- **Database Access**: P≈ôedvytvo≈ôen√° DB s MCP serverem pro Cursor
- **Data Management**: pgAdmin pro spr√°vu dat

### Struktura aplikace
```
Project/
‚îú‚îÄ‚îÄ Frontend (Static)
‚îÇ   ‚îú‚îÄ‚îÄ index.html          # Hlavn√≠ HTML soubor s Tailwind CSS
‚îÇ   ‚îú‚îÄ‚îÄ api-client.js       # API komunikace s backendem
‚îÇ   ‚îî‚îÄ‚îÄ favicon.ico         # Favicon
‚îú‚îÄ‚îÄ Backend (Node.js API)
‚îÇ   ‚îú‚îÄ‚îÄ server.js           # Express server p≈ôipojen√Ω k PostgreSQL
‚îÇ   ‚îú‚îÄ‚îÄ package.json        # Dependencies (express, pg, cors, dotenv)
‚îÇ   ‚îî‚îÄ‚îÄ env.example         # Environment variables template
‚îú‚îÄ‚îÄ Database
‚îÇ   ‚îú‚îÄ‚îÄ create_database.sql  # Database schema
‚îÇ   ‚îú‚îÄ‚îÄ migration_data.sql  # Sample data
‚îÇ   ‚îî‚îÄ‚îÄ setup_complete.sql  # All-in-one setup
‚îú‚îÄ‚îÄ Deployment
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile          # Multi-stage build (Node.js + Nginx)
‚îÇ   ‚îú‚îÄ‚îÄ captain-definition  # CapRover configuration
‚îÇ   ‚îú‚îÄ‚îÄ nginx.conf          # Nginx reverse proxy config
‚îÇ   ‚îî‚îÄ‚îÄ supervisord.conf    # Process management
‚îî‚îÄ‚îÄ Documentation
    ‚îú‚îÄ‚îÄ README.md           # Main documentation
    ‚îú‚îÄ‚îÄ DEPLOYMENT.md       # Deployment guide
    ‚îî‚îÄ‚îÄ DATABASE_SETUP.md   # Database setup
```

## üõ†Ô∏è Technologie a z√°vislosti

### Frontend
- **HTML5**: Semantic markup, modern features
- **CSS Framework**: Tailwind CSS (nebo jin√Ω framework dle pot≈ôeby)
- **JavaScript**: Vanilla JS nebo framework dle pot≈ôeby
- **Icons**: Lucide Icons nebo jin√° knihovna dle pot≈ôeby
- **API Client**: Custom client pro komunikaci s backendem

### Backend
- **Node.js**: >=18.0.0 (ES modules)
- **Express**: Web framework
- **PostgreSQL**: Extern√≠ datab√°ze s pg driver
- **CORS**: Cross-origin resource sharing
- **dotenv**: Environment variables

### Database
- **PostgreSQL**: Externƒõ hostovan√° datab√°ze
- **JSONB**: Flexible data storage
- **Indexes**: GIN indexes pro JSONB queries
- **Views**: Pre-computed statistics a recent data
- **Triggers**: Auto-update timestamps

### Deployment
- **Docker**: Multi-stage build (Node.js + Nginx Alpine)
- **CapRover**: Container orchestration
- **Nginx**: Reverse proxy a static file serving
- **Supervisor**: Process management

## üóÑÔ∏è Database Schema Patterns

### Z√°kladn√≠ tabulka struktura
```sql
CREATE TABLE main_table (
    id SERIAL PRIMARY KEY,
    date DATE,
    data JSONB,              -- Flexibiln√≠ data
    metadata JSONB,           -- Metadata
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Indexy pro optimalizaci
- `idx_table_date` - Rychl√© vyhled√°v√°n√≠ dle data
- `idx_table_updated_at` - Sortov√°n√≠ dle aktualizace
- `idx_table_data_gin` - JSONB queries pro flexibiln√≠ data
- `idx_table_metadata_gin` - JSONB queries pro metadata

### Views pro ƒçasto pou≈æ√≠van√© dotazy
- `v_recent_data` - Posledn√≠ch 30 dn√≠ s agregovan√Ωmi daty
- `v_statistics` - Celkov√© statistiky (poƒçet z√°znam≈Ø, pr≈Ømƒõry, atd.)

## üöÄ Deployment Architecture

### Git-based Deployment
1. **Source Control**: K√≥d je verzov√°n v Git repository
2. **Deployment Process**: Git push ‚Üí CapRover automatick√Ω build
3. **Hosting**: CapRover na hostovan√©m serveru
4. **Build Process**: Docker multi-stage build
5. **Runtime**: Nginx + Node.js via Supervisor
6. **Health Checks**: `/health` endpoint
7. **SSL**: Let's Encrypt automaticky
8. **Scaling**: Horizontal scaling podporov√°no

### Docker Configuration Example
```dockerfile
# Multi-stage build for Full-Stack Application

# Stage 1: Build Node.js API
FROM node:18-alpine AS api
WORKDIR /app
COPY package.json ./
RUN npm install --production
COPY server.js ./
COPY env.example ./.env

# Stage 2: Production image with Nginx + Node.js
FROM nginx:alpine

# Install Node.js and supervisor for process management
RUN apk add --no-cache nodejs npm supervisor curl

# Copy API from builder stage
COPY --from=api /app /app

# Copy frontend files
COPY index.html /usr/share/nginx/html/
COPY api-client.js /usr/share/nginx/html/
COPY favicon.ico /usr/share/nginx/html/

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy supervisor configuration
COPY supervisord.conf /etc/supervisord.conf

# Expose ports
EXPOSE 80 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD curl --fail http://localhost/health || exit 1

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
```

### Dockerfile Template Features
- **Multi-stage Build**: Optimalizace velikosti image
- **Stage 1**: Node.js API build s dependencies
- **Stage 2**: Production image s Nginx + Node.js
- **Process Management**: Supervisor pro spr√°vu obou proces≈Ø
- **Health Check**: Automatick√° kontrola zdrav√≠ aplikace
- **Port Exposure**: 80 (Nginx) + 3000 (Node.js API)
- **Static Files**: Frontend soubory p≈ôes Nginx
- **API Proxy**: Nginx proxy pro API requests

### Nginx Configuration
- **Static Files**: Served directly by Nginx
- **API Proxy**: `/api/*` ‚Üí Node.js backend (port 3000)
- **Health Check**: `/health` ‚Üí Node.js health endpoint
- **Gzip**: Compression enabled
- **Security Headers**: X-Frame-Options, X-XSS-Protection, atd.
- **Caching**: 1 year cache pro static assets

## üîß Development Guidelines

### Code Style
- **JavaScript**: ES6+ modules, async/await
- **SQL**: PostgreSQL specific syntax, JSONB operations
- **HTML**: Semantic markup, accessibility
- **CSS**: Tailwind utility classes, custom CSS variables

### API Design
- **RESTful**: Standard HTTP methods (GET, POST, PATCH, DELETE)
- **JSON**: All responses in JSON format
- **Error Handling**: Consistent error response structure
- **CORS**: Configurable origins
- **Health Checks**: `/health` endpoint pro monitoring

### Database Operations
- **Connection Pooling**: pg.Pool s 20 max connections
- **Error Handling**: Graceful degradation, proper logging
- **JSONB**: Use JSONB pro flexible data storage
- **Transactions**: Use transactions pro data consistency
- **MCP Integration**: Cursor m√° p≈ô√≠stup k DB p≈ôes MCP server
- **Data Management**: pgAdmin pro vizu√°ln√≠ spr√°vu dat
- **Pre-created DB**: Datab√°ze je p≈ôedvytvo≈ôen√° a p≈ôipraven√°

## üîê Security Considerations

### Environment Variables
```bash
# Database
DB_HOST=your_host
DB_PORT=5432
DB_NAME=your_database
DB_USER=your_user
DB_PASSWORD=your_password

# API
PORT=3000
NODE_ENV=production
ALLOWED_ORIGINS=http://localhost:8080,https://yourdomain.com
```

**Pozn√°mka**: Environment variables se nastavuj√≠ p≈ô√≠mo v CapRover dashboardu. U≈æivatel je nastavuje p≈ôes CapRover interface, nen√≠ pot≈ôeba je commitovat do k√≥du.

### Security Headers
- **X-Frame-Options**: SAMEORIGIN
- **X-Content-Type-Options**: nosniff
- **X-XSS-Protection**: 1; mode=block
- **CORS**: Configurable origins

### Database Security
- **Connection Pooling**: Limit connections
- **Prepared Statements**: SQL injection protection
- **User Permissions**: Separate app user s omezen√Ωmi pr√°vy

## üìä Monitoring a Logging

### Health Checks
- **Endpoint**: `/health`
- **Response**: `{status: 'healthy', timestamp: '...', database: 'connected'}`
- **Docker**: HEALTHCHECK directive v Dockerfile

### Logging
- **Request Logging**: All HTTP requests logged
- **Database Logging**: Connection status, query errors
- **Error Handling**: Uncaught exceptions, unhandled rejections
- **Graceful Shutdown**: SIGTERM/SIGINT handling

## üîÑ Data Flow

### Frontend ‚Üí Backend
1. **API Client**: Custom client handles all API calls
2. **Endpoints**: `/api/*` pro CRUD operations
3. **Error Handling**: Consistent error responses
4. **Caching**: Browser caching pro static assets

### Backend ‚Üí Database
1. **Connection Pool**: pg.Pool manages connections
2. **JSONB Storage**: Flexible data structure
3. **Views**: Pre-computed statistics
4. **Indexes**: Optimized queries

## üö® Troubleshooting

### Common Issues
1. **Database Connection**: Check DB_HOST, DB_PORT, credentials
2. **CORS Issues**: Verify ALLOWED_ORIGINS setting
3. **Build Failures**: Check Docker build logs
4. **SSL Issues**: Verify domain configuration v CapRover

### Debug Commands
```bash
# Check database connection
psql -h your_host -p 5432 -U your_user -d your_database

# Check CapRover logs
caprover logs -a your_app_name -f

# Test API endpoints
curl https://your_app_name.aici.cz/health
curl https://your_app_name.aici.cz/api/your_endpoint
```

## üìù Development Workflow

### Git-based Deployment Process
1. **Code Changes**: Commit a push do Git repository
2. **Automatic Build**: CapRover automaticky build√≠ z Git
3. **Deployment**: CapRover deployuje na hostovan√Ω server
4. **Health Check**: Verify `/health` endpoint
5. **SSL**: Automatic Let's Encrypt
6. **Monitoring**: Check logs a metrics

### Database Management
1. **MCP Access**: Cursor m√° p≈ô√≠m√Ω p≈ô√≠stup k DB p≈ôes MCP
2. **pgAdmin**: Vizu√°ln√≠ spr√°va dat p≈ôes pgAdmin
3. **Pre-created Schema**: Datab√°ze je p≈ôedvytvo≈ôen√°
4. **Data Validation**: Kontrola dat p≈ôes pgAdmin

## üéØ Best Practices

### Code Organization
- **Separation of Concerns**: Frontend/Backend/Database
- **Error Handling**: Consistent error responses
- **Logging**: Comprehensive logging
- **Documentation**: Clear comments a README files

### Performance
- **Gzip Compression**: Nginx gzip enabled
- **Browser Caching**: 1 year cache pro static assets
- **Database Indexes**: Optimized queries
- **Connection Pooling**: Efficient database connections

### Security
- **Environment Variables**: Never commit secrets
- **CORS**: Restrict origins v production
- **SQL Injection**: Use prepared statements
- **HTTPS**: Force HTTPS v production

## üîß Maintenance

### Regular Tasks
- **Database Backups**: Automated backups
- **Log Rotation**: Manage log file sizes
- **Security Updates**: Keep dependencies updated
- **Monitoring**: Check health endpoints

### Scaling
- **Horizontal Scaling**: Multiple instances
- **Load Balancing**: CapRover handles this
- **Database**: Consider read replicas for large datasets
- **CDN**: Consider CDN pro static assets

## üìã Customization Checklist

P≈ôi pou≈æit√≠ t√©to ≈°ablony pro nov√Ω projekt:

### 1. N√°zev a popis
- [ ] Zmƒõ≈àte n√°zev aplikace v dokumentaci
- [ ] Upravte popis funkcionalit
- [ ] Aktualizujte README.md

### 2. Database Schema
- [ ] Definujte specifick√© tabulky pro va≈°i aplikaci
- [ ] Vytvo≈ôte indexy pro va≈°e query patterns
- [ ] Nastavte views pro ƒçasto pou≈æ√≠van√© dotazy

### 3. API Endpoints
- [ ] Definujte RESTful endpoints pro va≈°e entity
- [ ] Implementujte CRUD operace
- [ ] Nastavte error handling

### 4. Frontend
- [ ] Upravte HTML strukturu pro va≈°e pot≈ôeby
- [ ] Implementujte JavaScript funkcionality
- [ ] Nastavte CSS framework (Tailwind, Bootstrap, nebo jin√Ω)
- [ ] Zvolte vhodn√Ω frontend approach (SPA, MPA, nebo hybrid)

### 5. Environment Variables
- [ ] Nastavte environment variables v CapRover dashboardu
- [ ] Aktualizujte env.example jako template
- [ ] Konfigurujte CORS origins (nahraƒète yourdomain.com za konkr√©tn√≠ n√°zev aplikace na aici.cz)

### 6. Deployment
- [ ] Upravte Dockerfile pro specifick√© pot≈ôeby
- [ ] Nastavte nginx.conf
- [ ] Konfigurujte CapRover settings
- [ ] Nastavte Git ‚Üí CapRover deployment
- [ ] Ovƒõ≈ôte MCP server p≈ôipojen√≠ k DB
- [ ] Nastavte pgAdmin p≈ô√≠stup pro data management

### 7. Dockerfile Customization
- [ ] Upravte COPY p≈ô√≠kazy pro va≈°e frontend soubory
- [ ] P≈ôidejte/odeberte dependencies v package.json
- [ ] Upravte porty podle pot≈ôeby
- [ ] Nastavte health check endpoint
- [ ] P≈ôidejte dal≈°√≠ build stages pokud pot≈ôebujete

---

**Pozn√°mky:**
- Tato ≈°ablona je navr≈æena pro full-stack webov√© aplikace
- Frontend je standalone HTML soubor s API komunikac√≠
- Backend je lightweight Express API
- Deployment je optimalizovan√Ω pro CapRover s Docker
- Database schema je navr≈æena pro flexibiln√≠ data storage